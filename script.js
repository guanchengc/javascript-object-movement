/** @type {HTMLCanvasElement} */
const canvas = document.getElementById('canvas');
const ctx = canvas.getContext('2d');
const width = 2;
const originalW = 1000;

var mousePos = [];

var dots = [];
var t = 0;

var loveTarget = [
    [0.016,1.46],
    [0.12,1.61],
    [0.26,1.78],
    [0.6,2],
    [1.01,2.06],
    [1.52,1.91],
    [1.96,1.585],
    [2.18,0.69],
    [1.83,-0.264],
    [0.9,-1.27],
    [0,-2],
]

var temp = []
//reflect the image
loveTarget.forEach(point => {
    temp.push([-point[0], point[1]]);
});

temp.reverse();

loveTarget = loveTarget.concat(temp)

temp = []
//change coordinate system
loveTarget.forEach(point => {
    temp.push([point[0] * 150 + 500, point[1] * -150 + 500]);
});
console.log(temp)

loveTarget = temp



class Dot {
    constructor(){
        this.pos = {
            x: 0,
            y: 0,
        };
        this.vel = {
            x: 0,
            y: 0,
        };
        this.accel = {
            x: 0,
            y: 0,
        };
        this.capp = Math.random() * 0.1 + 0.8;
        this.range = 5;
        this.z = 0;
        this.radius = 50;
        this.targetPoints = loveTarget;
        this.indexOfTarget = 0;
        this.k = "rgba(" + Math.round(Math.random() * 255).toString() + "," + Math.round(Math.random() * 255).toString() + "," + Math.round(Math.random() * 255).toString() + ",1)"


        this.target = this.targetPoints[this.indexOfTarget];
        this.offset = [this.range * Math.random() - this.range / 2, this.range * Math.random() - this.range/2];
    }

    normalise(v) {
        let temp = Math.sqrt(v.x * v.x + v.y * v.y);
        return {x: v.x / temp, y: v.y / temp}
    }
    
    add(v1, v2) {
        return {x: v1.x + v2.x, y: v1.y + v2.y}
    }

    scale(v) {
        return v;
        var dist = Math.sqrt((this.pos.x - this.target[0]) ** 2 + (this.pos.y - this.target[1]) ** 2)
        return {
            x: v.x * (dist - 0) / 300,
            y: v.y * (dist - 0) / 300,
        }
    }

    cap(v) {
        //v is velocity
        //temp is the magnitude of velocity
        let temp = Math.sqrt(v.x * v.x + v.y * v.y);
        var dist = Math.sqrt((this.pos.x - this.target[0]) ** 2 + (this.pos.y - this.target[1]) ** 2)
        
        //dist / 500 gives how much it has
        let capi = 1000000;
        if (temp > capi) {
            return {
                x: v.x * capi / temp,
                y: v.y * capi / temp,
            }
        }
        return {x: v.x * this.capp, y: v.y * this.capp};
    }

    calcz() {
        //calculate the height value
        this.z = this.pos.y;
        if (this.z <= 0) {
            this.z = 0.01;
        }

        this.radius = this.z * 0.01;
        this.range = this.z * 0.3;
    }

    bird() {
        ctx.beginPath();
        ctx.arc(this.pos.x, this.pos.y, this.radius, 0, Math.PI * 2);
        ctx.stroke();
        ctx.fillStyle = "black";
        
        let dimentions = [977.8333740234375, 932];
        let scales = this.radius * 0.01;
        let offset = [this.pos.x, this.pos.y];
        
        let angle = Math.atan(this.vel.y / this.vel.x);
        
        if (this.vel.y > 0 && this.vel.x < 0) {
            angle = angle - Math.PI / 2;
        }
        else if (this.vel.y < 0 && this.vel.x < 0) {
            angle = angle - Math.PI / 2;
        }
        else{
            angle += Math.PI / 2;
        }
        let theta = Math.atan(dimentions[1] / dimentions[0]);
        let hyp = Math.sqrt(dimentions[0] ** 2 + dimentions[1] ** 2) / 2 * scales;
        
        offset = [offset[0] - Math.cos(theta + angle) * hyp, offset[1] - Math.sin(theta + angle) * hyp];
        ctx.translate(offset[0], offset[1]);
        ctx.rotate(angle);
        ctx.scale(scales, scales);
        //ctx.fillRect(this.pos.x - offset[0], this.pos.y - offset[1], dimentions[0], dimentions[1]);
        
        ctx.fillStyle = this.k;
        let p = new Path2D(" M1025.000000,482.666687   C1020.504761,481.623322 1016.074158,483.208893 1011.628601,483.415375   C1002.824585,483.824249 994.041687,484.701874 985.255005,485.444550   C984.324036,485.523254 983.426208,485.993530 981.510620,486.598938   C986.549744,489.757751 990.823486,492.502045 995.161987,495.139740   C1000.439331,498.348175 1005.575378,501.760437 1010.246399,505.803345   C1012.203796,507.497498 1015.045593,509.455566 1013.667114,512.317017   C1012.318054,515.117249 1009.151245,513.701111 1006.836548,513.194397   C1000.314941,511.766754 994.105042,509.322754 987.898315,506.901398   C984.949890,505.751129 982.029602,504.504181 979.017212,503.552155   C977.328430,503.018463 975.255737,502.402710 973.950623,504.252136   C972.668579,506.068909 973.881653,507.750549 974.869690,509.300293   C977.505005,513.433411 981.171143,516.584351 984.838318,519.743835   C988.744324,523.108948 993.019470,526.078735 996.259338,530.168945   C997.614075,531.879272 999.210632,533.728760 997.662415,535.978088   C996.311890,537.940247 994.048828,538.273254 991.804993,537.952820   C986.444519,537.187195 981.585876,535.033264 976.927795,532.369812   C973.169617,530.220947 969.473511,527.952881 965.633667,525.961670   C963.339722,524.772156 960.924683,523.596191 957.898438,523.839844   C957.559570,527.748413 960.882141,529.305725 962.349731,531.867004   C963.701172,534.225769 966.877686,536.221497 965.505188,539.230347   C964.246338,541.989990 960.829407,541.455627 958.269348,541.580688   C945.242737,542.216797 932.365601,540.384094 919.495300,538.784180   C897.529358,536.053711 875.889832,531.300781 854.025940,527.951477   C830.587585,524.360962 807.031677,522.119934 783.514343,527.155762   C768.708557,530.326111 755.547729,537.737976 742.144836,544.418945   C711.148010,559.870056 680.564880,576.191956 647.851135,587.950195   C626.684143,595.558167 605.057129,600.369995 582.460144,600.359436   C575.634949,600.356262 568.810608,600.862427 561.984009,600.922302   C558.396118,600.953796 556.817505,602.454712 555.837097,605.962463   C552.543518,617.745911 551.556946,629.838989 550.316528,641.911743   C547.560547,668.734131 547.701721,695.769958 544.389404,722.550293   C543.530396,729.494995 542.378174,736.390747 539.787781,742.945923   C537.882507,747.767395 534.644348,751.006531 529.271423,751.798767   C516.350830,753.703735 503.406097,754.087280 490.460602,752.263977   C483.131439,751.231689 478.677917,747.513062 477.258728,739.586792   C475.134155,727.720886 474.754120,715.749084 474.041809,703.816467   C473.119110,688.359741 473.059875,672.850708 472.663818,657.363342   C472.233765,640.548157 471.076904,623.774902 469.556519,607.031677   C468.732269,597.954834 465.279053,595.781738 456.264374,596.674988   C443.331268,597.956665 430.692963,601.162964 417.715057,602.106750   C389.675446,604.145630 365.025360,594.595825 341.763428,580.180725   C318.351624,565.672852 296.900238,548.426025 274.790710,532.102417   C272.242188,530.220764 269.776672,529.255676 266.585693,529.245605   C245.421005,529.178833 224.247009,529.301636 203.188858,531.489990   C185.952423,533.281189 169.181747,537.770142 152.320328,541.656067   C124.743614,548.011536 97.170647,554.393616 68.709755,555.493164   C64.600624,555.651978 60.532063,556.868958 55.456177,555.825256   C63.319401,546.439087 74.449150,540.823486 80.627632,529.981323   C76.615593,528.796631 73.976562,530.811401 71.323326,532.200439   C64.242966,535.907227 57.816250,540.760010 50.509151,544.098389   C45.476509,546.397644 40.294674,548.180542 34.827991,548.994812   C32.283516,549.373840 29.652836,549.142578 28.311747,546.477417   C27.043896,543.957886 29.134565,542.451233 30.566866,540.927307   C37.334076,533.727417 45.549938,528.222351 53.020859,521.843994   C56.398167,518.960632 60.087727,516.339111 62.469769,512.136108   C59.792057,510.039215 57.166473,511.080811 54.829163,511.993286   C48.472866,514.474670 42.210751,517.200928 35.940197,519.897339   C29.864420,522.510010 23.552315,523.723999 16.945568,523.349854   C14.278142,523.198792 11.168478,523.327393 10.302475,520.147034   C9.544703,517.364197 12.297516,516.200928 14.098834,514.868591   C22.856821,508.391052 33.034798,504.394379 42.328579,498.845001   C44.016880,497.836853 45.791386,496.970093 47.258644,494.438141   C32.384357,491.324432 17.025688,495.682434 3.041457,489.769043   C3.269116,486.503784 5.550013,486.118561 7.201125,485.273682   C15.859637,480.842987 25.277706,478.539581 34.513901,475.740997   C41.845673,473.519470 49.187988,471.332916 56.201416,468.209229   C57.710850,467.536957 59.204895,466.751526 60.538807,465.786957   C61.751854,464.909790 62.890369,463.667450 62.419891,462.003967   C61.892174,460.138031 60.125851,460.330109 58.659397,460.333618   C49.742199,460.354889 41.211945,462.779999 32.646461,464.801331   C26.631432,466.220825 20.575560,467.252960 14.465554,468.025116   C12.686159,468.249969 10.522313,468.473999 9.722399,466.313721   C9.005302,464.377045 10.725487,463.303406 12.007874,462.283691   C21.065893,455.081177 31.349272,449.880432 41.523197,444.554993   C83.966171,422.338593 128.911804,406.997192 175.332504,395.524658   C199.570282,389.534454 223.298950,381.662903 247.144135,374.255676   C268.312744,367.679871 289.631561,361.796600 312.062927,361.698761   C322.797546,361.651947 332.640533,364.388092 341.996185,369.846283   C361.337372,381.130096 378.858917,395.026825 397.316284,407.573273   C412.947418,418.198547 428.855255,428.259979 448.068604,431.114777   C452.999969,431.847534 457.987701,432.448364 462.963562,432.579987   C471.658264,432.810028 477.565063,427.857422 482.409729,421.257324   C488.353760,413.159424 491.228394,403.787994 493.668945,394.231110   C495.773712,385.989136 498.509430,377.958466 501.836517,370.130676   C502.291931,369.059204 502.788818,367.995392 503.374023,366.990662   C506.582886,361.481506 509.615143,355.518524 517.266785,355.731689   C525.075378,355.949249 529.522034,361.054688 532.642090,367.529633   C538.436279,379.553925 542.344788,392.332520 547.330566,404.681732   C547.829346,405.917053 548.337585,407.149628 548.794128,408.400757   C553.960510,422.559082 563.449524,429.093292 579.130493,429.223755   C598.105957,429.381592 613.251770,421.492523 627.634155,410.839539   C641.958679,400.229340 655.934387,389.148468 670.249878,378.525757   C680.734253,370.745880 691.732727,363.621887 705.106689,362.095154   C716.394653,360.806519 727.738220,361.702209 739.012207,362.834076   C765.731201,365.516602 791.994568,370.744751 817.963562,377.470123   C861.732788,388.805359 904.252014,403.818604 945.928040,421.277863   C962.978088,428.420624 980.158264,435.278595 996.529907,443.934357   C998.968567,445.223724 1001.613647,446.348480 1002.947266,449.030426   C1001.260742,451.792908 998.758911,451.362518 996.547241,451.237335   C986.742920,450.682526 976.948853,449.949188 967.145752,449.368683   C964.682007,449.222839 962.143494,449.196716 960.106689,451.171417   C960.264648,453.807251 962.394043,454.762024 964.147400,455.852051   C973.807617,461.857910 983.832153,466.796692 995.215576,469.022766   C1005.562378,471.046143 1014.835999,476.313049 1024.692871,480.819214   C1025.000000,481.444458 1025.000000,481.888885 1025.000000,482.666687  z")
        
        ctx.fill(p);
        ctx.scale(1 / scales, 1 / scales);
        ctx.rotate(-angle);
        ctx.translate(-offset[0], -offset[1]);
        
        ctx.closePath();

    }

    draw() {
        /** @type {HTMLCanvasElement} */
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        this.calcz();
        this.accel = this.normalise({
            x: this.target[0] - this.pos.x,
            y: this.target[1] - this.pos.y,
        });
        this.accel = this.scale(this.accel);
        
        this.bird();

        this.vel = this.add(this.vel, this.accel);
        this.vel = this.cap(this.vel);
        this.pos = this.add(this.pos, this.vel);

        if (Math.random() < 0) {
            this.offset = [this.range * Math.random() - this.range / 2, this.range * Math.random() - this.range / 2];
        }
        if (Math.sqrt((this.pos.x - this.target[0]) ** 2 + (this.pos.y - this.target[1]) ** 2) <= 40) {
            this.indexOfTarget += 1;
            this.offset = [this.range * Math.random() - this.range / 2, this.range * Math.random() - this.range / 2];
            if (this.indexOfTarget >= this.targetPoints.length) {
                this.indexOfTarget = 0;
            }
        }
        
        this.target = [this.targetPoints[this.indexOfTarget][0] + this.offset[0], this.targetPoints[this.indexOfTarget][1] + this.offset[1]];
    }
}


function clear(){
    ctx.fillStyle = 'rgba(256, 256, 256, 1)';
    ctx.fillRect(0, 0, originalW, originalW); 
}

function draw(){
    clear();
    t += 0.01;
    if (Math.round(t * 10) == 10){
        t = 0;
    }
    dots.forEach(dott => {
        dott.draw();
    });
    requestAnimationFrame(draw);
}

canvas.onmousemove = function (e) {
    mousePos = [e.pageX, e.pageY];
}

canvas.onmousedown = function (e) {
    for (let index = 0; index < 200; index++) {
        dots.push(new Dot());
        
    }
}


draw();